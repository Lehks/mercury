[header]
{
    "array": {
        "arrayJoin": "\n"
    },
    "stringify": {
        "padLeft": "'",
        "padRight": "'"
    },
    "hasPartialParent": {
        "switch": {
            "cases": {
                "true": "./partial-tables/$parentModule$",
                "false": "mercury/dist/lib/core/generation/client/table-base"
            }
        }
    }
}
[header]
import BaseClass from '@hasPartialParent:#hasPartialParent@';
import TableBase from 'mercury/dist/lib/core/generation/client/table-base';
import Connection from 'mercury/dist/lib/core/connection/connection';

declare abstract class @tableName@<T = unknown> extends BaseClass<T> {
@columnConstants:#array@

@getters:#array@

    public multiGet(columns: @tableName@.IColumnConstantBase[], connection?: Connection): Promise<@tableName@.IMultiGetResult>;

@setters:#array@

    public multiSet(values: @tableName@.IMultiSetData, connection?: Connection): Promise<void>;
}

declare namespace @tableName@ {
    interface IOwnColumnConstantBase extends TableBase.IOwnColumnConstantBase {
        table: '@tableName@'
    }

    type IColumnConstantBase = IOwnColumnConstantBase | BaseClass.IColumnConstantBase;

    interface IMultiGetResult extends BaseClass.IMultiGetResult {
@multiGetProperties:#array@
    }

    interface IMultiSetData extends BaseClass.IMultiSetData {
@multiSetProperties:#array@
    }

    interface IInsertData extends BaseClass.IInsertData {
@insertDataProperties:#array@
    }
}

export = @tableName@;
