[header]
{
    "array": {
        "arrayJoin": "\n\n"
    },
    "hasPartialParent": {
        "switch": {
            "cases": {
                "true": "./partial-tables/$parentModule$",
                "false": "mercury/dist/lib/core/generation/client/table-base"
            }
        }
    }
}
[header]
/* eslint-disable */
/* tslint:disable */
const _ = require('lodash');
const BaseClass = require('@hasPartialParent:#hasPartialParent@');
const ConnectionManager = require('../@connectionModule@');
const TableBase = require('mercury/dist/lib/core/generation/client/table-base');

class @tableName@ extends BaseClass {
    static #DATA = {
        connectionManager: ConnectionManager,
        primaryKeyNames: @primaryKeyNames@,
        table: '@rdbmsTableName@'
    };

    static #RDBMS_TO_PROPERTY_NAME_MAP = @rdbmsToPropertyNameMap@;

    static #PROPERTY_TO_RDBMS_NAME_MAP = @propertyToRdbmsNameMap@;

@columnConstants:#array@

    constructor(primaryKey) {
        super(
            @tableName@.#DATA, 
            primaryKey, 
            @tableName@.#RDBMS_TO_PROPERTY_NAME_MAP, 
            @tableName@.#PROPERTY_TO_RDBMS_NAME_MAP
        );
    }

    static getConnectionManager() {
        return @tableName@.#DATA.connectionManager;
    }

    static async insert(data, connection) {
        const result = await TableBase.insertHelper(@tableName@.#DATA, data, @tableName@.#PROPERTY_TO_RDBMS_NAME_MAP, connection);

        return new @tableName@(result.insertId);
    }

    static async findById(primaryKey, checkExistence = true, connection) {
        const ret = new @tableName@(primaryKey);

        if (checkExistence && !(await ret.exists(connection))) {
            return null;
        }

        return ret;
    }

@getters:#array@

    async multiGet(columns, connection) {
        return this.multiGetInternal(columns.map(col => col.rdbmsName), connection);
    }

    async multiSet(values, connection) {
        return this.multiSetInternal(values, connection);
    }

@setters:#array@
}

module.exports = @tableName@;
